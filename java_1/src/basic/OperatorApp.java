package basic;

//연산자(Operator) : 계산을 목적으로 제공되는 기호 또는 키워드
//=> 피연산자 : 연산자에 의해 계산되는 값을 의미
//=> 단항연산자(피연산자 : 1개), 이항연산자(피연산자 : 2개), 삼항연산자(피연산자 : 3개)


public class OperatorApp {
	public static void main(String[] args) {
		//최우선 연산자 : 무조건 가장 먼저 연산 처리되는 연산자
		//=> () : 우선 처리 연산자 , [] : 배열 연산자 , . : 객체 연산자
		System.out.println("10+20*3 = "+(10+20*3));
		System.out.println("(10+20)*3 = "+((10+20)*3));
		System.out.println("==============================================================");
		
		//단항 연산자 : 피연산자의 개수가 1개인 연산자
		//=> + : 양수화 연산자 - 피연산자에 +1을 곱하는 연산자
		//=> - : 음수화 연산자(2의 보수 연산자)
		//=> ~ : Bit Not 연산자(1의 보수 연산자) : 정수값으로 표현된 Bit 단위의 값을 반대로 변환하는 연산자
		//=> ! : Not 연산자 :  false(거짓)와 true(참)을 반대로 변환하는 연산자
		//=> ++ : 1 증가 연산자 : 피연산자를 변수로 설정하고 변수값을 1 증가하여 저장하는 연산
		//=> -- : 1 감소 연산자 : 피연산자를 변수로 설정하고 변수값을 1 감소하여 저장하는 연산
		//=> (자료형) : 강제 형변환 - 피연산자의 자료형을 일시적으로 변환하는 연산자
		//=> new : 객체 생성 연잔자 - 클래스의 생성자를 호출하여 객체를 생성하기 위한 연산자
		
		int a1=10;
		System.out.println("a1 = "+a1);
		System.out.println("-a1 = "+(-a1));
		System.out.println("==============================================================");
		System.out.println("20 > 10 = "+(20>10));
		System.out.println("!(20 > 10) = "+ !(20>10));
		System.out.println("==============================================================");
		
		int a2=10, a3=10;
		System.out.println("a2 = "+a2+", a3 = "+a3);
		
		//++연산자와 --연산자는 피연산자 뒤에 작성 가능
		//하나의 연산식으로 구현된 단일 명령인 경우 연산자의 위치는 연산 결과에 미영향
		a2++; //결과값 11
		a3--; //결과값 9
		//++a2; //a2=a2+1 => 결과값 11
		//--a3; //a3=a3-1 => 결과값 9
		System.out.println("a2 = "+a2+", a3 = "+a3);
		System.out.println("==============================================================");
		
		//++연산자와 --연산자로만 구성된 단일 명령이 아닌 경우 연산자의 위치는 연산결과에 영향미침
		int a4=10, a5=10;
		System.out.println("a4 = "+a4+", a5 = "+a5);
		int result1=++a4; //전처리 : ++a4연산식이 실행된 후 result1=a4 연산식 실행
		int result2=a5++; //후처리 : result2+a5 연산식이 실행된 후 a5++연삭식 실행
		System.out.println("a4 = "+a4+", a5 = "+a5);
		System.out.println("result1 = "+result1+", result2 = "+result2);

		//이항 연산자 : 피연산자의 개수가 2개인 연산자
		//=> 산술 연산자, 이동 연산자, 비교 연산자, 논리 연산자, 대입 연산자
		//산술 연산자 : *(곱) , /(나눔) , %(나머지) , +(합 또는 문자열 결합) , -(차)
		int b1=20, b2=10;
		System.out.println(b1+" * "+b2+" = "+(b1*b2));
		System.out.println(b1+" / "+b2+" = "+(b1/b2));
		System.out.println(b1+" % "+b2+" = "+(b1%b2));
		System.out.println(b1+" + "+b2+" = "+(b1+b2));
		System.out.println(b1+" - "+b2+" = "+(b1-b2));
		System.out.println("==============================================================");

		//이동 연산자 : 정수값을 원하는 방향으로 Bit 수만큼 이동하는 연산자
		//=> << (왼쪽 이동 연산자), >> (오른쪽 이동 연산자-빈칸 부호비트랑 같은 수로 채움), >>> (오른쪽 이동 연산자)
		//50(10) - 4Byte : 00000000 00000000 00000000 00110010 (컴퓨터가 이해하는 50, 원래는 띄어쓰지않음 가독성을 위해 띄어씀)
		//50(10) << 3 : 00000000 00000000 00000001 10010000  => 400(10) (이동한 3자리는 오버플로우 발생->버림, 앞에 빈 3칸은 0으로 채움)
		//50(10) >> 3 : 00000000 00000000 00000000 00000110 => 6(10) (이동한 3자리는 언더플로우 발생->버림, 뒤에 빈 칸 0으로 채움)
		//-50(10) - 4Byte : 11111111 11111111 11111111 11001110 
		//-50(10) >> 3 : 11111111 11111111 11111111 11111001 
		//-50(10) >>> 3 : 00011111 11111111 11111111 11111001 (부호와 관계없이 빈칸은 무조건 0으로 채움)
		
		//비교(관계)연산자 : 값을 비교사여 false 또는 true 중 하나의 겨로가를 제공하는 연산자 
		//=> >, <, >=, <=, ==, !=, instanceof(객체 비교 연산자)
		System.out.println("20 > 10 = "+ (20>10));
		System.out.println("20 < 10 = "+ (20<10));
		System.out.println("20 == 10 = "+ (20==10));
		System.out.println("20 != 10 = "+ (20!=0));
		
		//논리 연산자 : Bit 논리 연산자, 일반 논리 연산자
		//=> Bit 논리 연산자 : 두 피연산자의 정수값을 Bit 단위로 계산하기 위한 연산자 - &(논리곱: 모두1일때만 1, 나머지 0), ^(배타적 논리합: 같으면 0, 다르면 1), |(논리합: 1개라도 1이면 1)
		//=> 일반 논리 연산자 : 두 개의 비교 연산식을 연결하기 위한 연산자 - &&(And), ||(Or)
		int c=20;
		System.out.println("c = " +c);
		//첫 번째 비교 조건식이 거짓인 경우 두 번째 비교 조건식 미실행
		System.out.println("c >= 10 && c <= 30 = "+ (c>=10&&c<=30));
		//첫 번째 비교 조건식이 참인 경우 두 번째 비교 조건식 미실행
		System.out.println("c < 10 || c > 30 = "+ (c<10||c>30));
		System.out.println("==============================================================");

		//삼항 연산자 : 피연산자의 개수가 3개인 연산자
		//형식) 조건식 ? 참값 : 거짓값;
		//=> 조건식(false 또는 true를 제공하는 연산식)의 결과가 true인 경우 참값 제공
		//=> 조건식(false 또는 true를 제공하는 연산식)의 결과가 false인 경우 거짓값 제공
		int d1=10, d2=20; //int d1=20, d2=10;
		System.out.println("큰 값 = "+(d1>d2?d1:d2));
		System.out.println("==============================================================");

		int d3=10;
		System.out.println(d3+" = "+(d3%2==0?"짝수":"홀수"));
		System.out.println("==============================================================");
		
		//대입 연산자 : 왼쪽 피연산자(변수)에 값을 저장하기 위한 연산자
		//=> 무조건 마지막에 실행되는 연산자
		//=> 순수 대입 연산자 : 변수의 값을 저장 - =
		//=> 계산 대입 연산자 : 변수의 저장된 값을 계산한 후 변수에 다시 저장 - *=, /=, +=, -=, >>=, <<=, >>>=, &=, ^=, |=
		int e=10;
		System.out.println("e = "+e);
		
		e+=20; //e=e+20;
		System.out.println("e = "+e);
		System.out.println("==============================================================");

		
		
		
		
	}

}
